{
    "swagger": "2.0",
    "info": {
        "description": "DOCSWAP is a platform designed for realtors to efficiently share, manage, and analyze documents on a neighborhood level. It enables realtors to make better use of the content created for each listing by organizing it into a searchable database that supports both uploads and downloads of documents. These documents are categorized to facilitate market analysis, putting the power of data directly into the hands of realtors and market analysts interested in housing information in the lower mainland.",
        "title": "DOCSWAP API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "DOC-SWAP Support",
            "url": "http://www.doc-swap.com/support",
            "email": "support@doc-swap.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/category": {
            "get": {
                "description": "get all categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Retrieve all categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/category/search": {
            "post": {
                "description": "Search for categories with the given search parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Search categories",
                "parameters": [
                    {
                        "description": "Search object",
                        "name": "searchObj",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/search.Search"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the category",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/category/{id}": {
            "get": {
                "description": "get a category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "Retrieve a category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/document/": {
            "get": {
                "description": "Get all documents from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Retrieve all documents",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted documents",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full tag details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the document",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Document"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create multiple new document records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Create multiple new document records",
                "parameters": [
                    {
                        "description": "Document objects",
                        "name": "document",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the document records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to create document records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/document/bulk": {
            "delete": {
                "description": "Delete multiple document records using documentID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Delete multiple document records",
                "parameters": [
                    {
                        "description": "Document objects that need to be deleted",
                        "name": "documents",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Document"
                            }
                        }
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set too false to fully delete the document records",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the document records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to delete document records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/document/download": {
            "get": {
                "description": "Download a document by its file location",
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Download document",
                "parameters": [
                    {
                        "type": "string",
                        "description": "File Location",
                        "name": "fileLocation",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully downloaded the document",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/document/search": {
            "post": {
                "description": "Search for documents with the given search parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Search documents",
                "parameters": [
                    {
                        "description": "Search object",
                        "name": "searchObj",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/search.Search"
                        }
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full tag details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the document",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Document"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/document/{documentId}": {
            "delete": {
                "description": "Delete a document records via its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Delete a document record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Document ID",
                        "name": "documentID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set too false to fully delete the document record",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the document record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Failed to delete the document record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/document/{id}": {
            "get": {
                "description": "get document record by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documents"
                ],
                "summary": "Retrieve document record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Document ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted documents",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full tag details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the document",
                        "schema": {
                            "$ref": "#/definitions/models.Document"
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/documenttag/": {
            "get": {
                "description": "Get all document tag records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documenttags"
                ],
                "summary": "Retrieve all document tag records",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted document tags",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full tag and document details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of document tag records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DocumentTag"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: No document tag records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new document tag record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documenttags"
                ],
                "summary": "Create a new document tag record",
                "parameters": [
                    {
                        "description": "Document Tag object that needs to be created",
                        "name": "documentTag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.DocumentTag"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the document tag record",
                        "schema": {
                            "$ref": "#/definitions/models.DocumentTag"
                        }
                    },
                    "400": {
                        "description": "Error: Unable to create document tag record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/documenttag/bulk": {
            "post": {
                "description": "Create multiple new document tag records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documenttags"
                ],
                "summary": "Create multiple new document tag records",
                "parameters": [
                    {
                        "description": "Document Tag objects that need to be created",
                        "name": "documentTags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DocumentTag"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the document tag records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DocumentTag"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Unable to create document tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete multiple document tag records by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documenttags"
                ],
                "summary": "Delete multiple document tag records by their ID",
                "parameters": [
                    {
                        "description": "Document Tag objects that need to be deleted",
                        "name": "documentTags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.DocumentTag"
                            }
                        }
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to fully delete the document tag records",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the document tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to delete document tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/documenttag/{documentId}/{tagId}": {
            "get": {
                "description": "Get a document tag record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documenttags"
                ],
                "summary": "Retrieve a document tag record by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Document ID",
                        "name": "documentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "tagId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted document tags",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full document and tag details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the document tag record",
                        "schema": {
                            "$ref": "#/definitions/models.DocumentTag"
                        }
                    },
                    "400": {
                        "description": "Error: No document tag record found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a document tag record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "documenttags"
                ],
                "summary": "Delete a document tag record by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Document ID",
                        "name": "documentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "tagId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to fully delete the document tag record",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the document tag record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to delete document tag record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tag/": {
            "get": {
                "description": "Get all tags from the database",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Retrieve all tags",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted tags",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full tag details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the tag",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tag"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create multiple new tag records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Create multiple new tag records",
                "parameters": [
                    {
                        "description": "Tag objects",
                        "name": "tag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to create tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tag/bulk": {
            "delete": {
                "description": "Delete multiple tag records using tagID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Delete multiple tag records",
                "parameters": [
                    {
                        "description": "Tag objects that need to be deleted",
                        "name": "tags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tag"
                            }
                        }
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to fully delete the tag records",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to delete tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tag/search": {
            "post": {
                "description": "Search for tags with the given search parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Search tags",
                "parameters": [
                    {
                        "description": "Search object",
                        "name": "searchObj",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/search.Search"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the tag",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tag"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tag/{id}": {
            "get": {
                "description": "get tag record by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Retrieve tag record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted tags",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full tag details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the tag",
                        "schema": {
                            "$ref": "#/definitions/models.Tag"
                        }
                    },
                    "400": {
                        "description": "Error: Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/tag/{tagId}": {
            "delete": {
                "description": "Delete a tag records via its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "tags"
                ],
                "summary": "Delete a tag record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "tagID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to fully delete the tag record",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the tag record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Failed to delete the tag record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "description": "get all user records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve all users",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted users",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full user details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: No user records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "create a new user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User object that needs to be created",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/current": {
            "put": {
                "description": "update the authenticated user's record using external ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update current user",
                "responses": {
                    "200": {
                        "description": "Successfully updated the current user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "Error: User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/current/": {
            "get": {
                "description": "get the current user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve the current user",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the current user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: No user records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/{id}/": {
            "get": {
                "description": "get a user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Retrieve a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted user",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full user details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: No user records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "put": {
                "description": "update a user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User object that needs to be updated",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated the user",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Error: Invalid request body",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "delete a user record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to disable soft delete",
                        "name": "softDelete",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted the user",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Invalid user ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/userdocument/": {
            "get": {
                "description": "Get all user document records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userdocuments"
                ],
                "summary": "Retrieve all user document records",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted user documents",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full user and document details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of user document records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserDocument"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: No user document records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user document record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userdocuments"
                ],
                "summary": "Create a new user document record",
                "parameters": [
                    {
                        "description": "User Document object that needs to be created",
                        "name": "userDocument",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserDocument"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the user document record",
                        "schema": {
                            "$ref": "#/definitions/models.UserDocument"
                        }
                    },
                    "400": {
                        "description": "Error: Unable to create user document record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/userdocument/bulk": {
            "post": {
                "description": "Create multiple new user document records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userdocuments"
                ],
                "summary": "Create multiple new user document records",
                "parameters": [
                    {
                        "description": "User Document objects that need to be created",
                        "name": "userDocuments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserDocument"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the user document records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserDocument"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Unable to create user document records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete multiple user document records by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userdocuments"
                ],
                "summary": "Delete multiple user document records by their ID",
                "parameters": [
                    {
                        "description": "User Document objects that need to be deleted",
                        "name": "userDocuments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserDocument"
                            }
                        }
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to fully delete the user document records",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the user document records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to delete user document records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/userdocument/{userId}/{documentId}": {
            "get": {
                "description": "Get a user document record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userdocuments"
                ],
                "summary": "Retrieve a user document record by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Document ID",
                        "name": "documentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted user documents",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full user and document details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the user document record",
                        "schema": {
                            "$ref": "#/definitions/models.UserDocument"
                        }
                    },
                    "400": {
                        "description": "Error: No user document record found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user document record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userdocuments"
                ],
                "summary": "Delete a user document record by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Document ID",
                        "name": "documentId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to fully delete the user document record",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the user document record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to delete user document record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/usertag/": {
            "get": {
                "description": "Get all user Tag records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserTags"
                ],
                "summary": "Retrieve all user Tag records",
                "parameters": [
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted user Tags",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full user and Tag details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the list of user Tag records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserTag"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: No user Tag records found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user Tag record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserTags"
                ],
                "summary": "Create a new user Tag record",
                "parameters": [
                    {
                        "description": "User Tag object that needs to be created",
                        "name": "UserTag",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserTag"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the user Tag record",
                        "schema": {
                            "$ref": "#/definitions/models.UserTag"
                        }
                    },
                    "400": {
                        "description": "Error: Unable to create user Tag record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/usertag/bulk": {
            "post": {
                "description": "Create multiple new user Tag records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserTags"
                ],
                "summary": "Create multiple new user Tag records",
                "parameters": [
                    {
                        "description": "User Tag objects that need to be created",
                        "name": "UserTags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserTag"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created the user Tag records",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserTag"
                            }
                        }
                    },
                    "400": {
                        "description": "Error: Unable to create user Tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete multiple user Tag records by their ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserTags"
                ],
                "summary": "Delete multiple user Tag records by their ID",
                "parameters": [
                    {
                        "description": "User Tag objects that need to be deleted",
                        "name": "UserTags",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserTag"
                            }
                        }
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to fully delete the user Tag records",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the user Tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to delete user Tag records",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/usertag/{userId}/{TagId}": {
            "delete": {
                "description": "Delete a user Tag record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserTags"
                ],
                "summary": "Delete a user Tag record by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "TagId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Set to false to fully delete the user Tag record",
                        "name": "softDelete",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successfully deleted the user Tag record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Error: Unable to delete user Tag record",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/usertag/{userId}/{tagId}": {
            "get": {
                "description": "Get a user Tag record by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserTags"
                ],
                "summary": "Retrieve a user Tag record by its ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Tag ID",
                        "name": "TagId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include soft deleted user Tags",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Set to true to include full user and Tag details",
                        "name": "full",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully retrieved the user Tag record",
                        "schema": {
                            "$ref": "#/definitions/models.UserTag"
                        }
                    },
                    "400": {
                        "description": "Error: No user Tag record found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Category": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "parent": {
                    "$ref": "#/definitions/models.Category"
                },
                "parentID": {
                    "type": "integer"
                }
            }
        },
        "models.Config": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "models.Document": {
            "type": "object",
            "properties": {
                "additionalDetails": {
                    "type": "string"
                },
                "address": {
                    "type": "string"
                },
                "approvedAt": {
                    "type": "string"
                },
                "approvedBy": {
                    "type": "integer"
                },
                "approvedByUser": {
                    "$ref": "#/definitions/models.User"
                },
                "category": {
                    "$ref": "#/definitions/models.Category"
                },
                "categoryID": {
                    "type": "integer"
                },
                "creditValue": {
                    "type": "integer"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "fileName": {
                    "type": "string"
                },
                "filePath": {
                    "type": "string"
                },
                "fileStorageURL": {
                    "type": "string"
                },
                "fileType": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DocumentTag"
                    }
                },
                "uploadedAt": {
                    "type": "string"
                }
            }
        },
        "models.DocumentTag": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "document": {
                    "$ref": "#/definitions/models.Document"
                },
                "documentID": {
                    "type": "integer"
                },
                "tag": {
                    "$ref": "#/definitions/models.Tag"
                },
                "tagID": {
                    "type": "integer"
                }
            }
        },
        "models.Permission": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RolePermission"
                    }
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.RolePermission"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserRole"
                    }
                }
            }
        },
        "models.RolePermission": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "permission": {
                    "$ref": "#/definitions/models.Permission"
                },
                "permissionID": {
                    "type": "integer"
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "roleID": {
                    "type": "integer"
                }
            }
        },
        "models.Tag": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.DocumentTag"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "authenticationType": {
                    "type": "string"
                },
                "biography": {
                    "type": "string"
                },
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserConfig"
                    }
                },
                "deletedAt": {
                    "type": "string"
                },
                "documents": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserDocument"
                    }
                },
                "email": {
                    "type": "string"
                },
                "externalUserID": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lastName": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.UserRole"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.UserConfig": {
            "type": "object",
            "properties": {
                "config": {
                    "$ref": "#/definitions/models.Config"
                },
                "configID": {
                    "type": "integer"
                },
                "deletedAt": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.UserDocument": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "document": {
                    "$ref": "#/definitions/models.Document"
                },
                "documentID": {
                    "type": "integer"
                },
                "isOwner": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.UserRole": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "role": {
                    "$ref": "#/definitions/models.Role"
                },
                "roleID": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.UserTag": {
            "type": "object",
            "properties": {
                "deletedAt": {
                    "type": "string"
                },
                "tag": {
                    "$ref": "#/definitions/models.Tag"
                },
                "tagID": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/models.User"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "search.LogicalOperator": {
            "type": "string",
            "enum": [
                "AND",
                "OR"
            ],
            "x-enum-varnames": [
                "And",
                "Or"
            ]
        },
        "search.Operator": {
            "type": "string",
            "enum": [
                "=",
                "!=",
                "\u003e",
                "\u003e=",
                "\u003c",
                "\u003c=",
                "LIKE",
                "NOT LIKE",
                "IN",
                "NOT IN",
                "IS NULL",
                "IS NOT NULL"
            ],
            "x-enum-varnames": [
                "Equal",
                "NotEqual",
                "GreaterThan",
                "GreaterThanOrEqual",
                "LessThan",
                "LessThanOrEqual",
                "Like",
                "NotLike",
                "In",
                "NotIn",
                "IsNull",
                "IsNotNull"
            ]
        },
        "search.Param": {
            "type": "object",
            "properties": {
                "AssociationForeignKey": {
                    "type": "string"
                },
                "Field": {
                    "type": "string"
                },
                "Operator": {
                    "$ref": "#/definitions/search.Operator"
                },
                "Value": {}
            }
        },
        "search.Search": {
            "type": "object",
            "properties": {
                "LogicalOperator": {
                    "$ref": "#/definitions/search.LogicalOperator"
                },
                "Params": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/search.Param"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI Specification for DOCSWAP",
        "url": "https://swagger.io/resources/open-api/"
    }
}